"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Object representation of the chunk section of a MIDI file.
 * @param {object} fields - {type: number, data: array, size: array}
 * @return {Chunk}
 */
var Chunk = function Chunk(fields) {
	_classCallCheck(this, Chunk);

	this.type = fields.type;
	this.data = fields.data;
	this.size = [0, 0, 0, fields.data.length];
};

exports.Chunk = Chunk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jaHVuay5qcyJdLCJuYW1lcyI6WyJDaHVuayIsImZpZWxkcyIsInR5cGUiLCJkYXRhIiwic2l6ZSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7SUFLTUEsSyxHQUNMLGVBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDbkIsTUFBS0MsSUFBTCxHQUFZRCxPQUFPQyxJQUFuQjtBQUNBLE1BQUtDLElBQUwsR0FBWUYsT0FBT0UsSUFBbkI7QUFDQSxNQUFLQyxJQUFMLEdBQVksQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVUgsT0FBT0UsSUFBUCxDQUFZRSxNQUF0QixDQUFaO0FBQ0EsQzs7UUFHTUwsSyxHQUFBQSxLIiwiZmlsZSI6ImNodW5rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNodW5rIHNlY3Rpb24gb2YgYSBNSURJIGZpbGUuXG4gKiBAcGFyYW0ge29iamVjdH0gZmllbGRzIC0ge3R5cGU6IG51bWJlciwgZGF0YTogYXJyYXksIHNpemU6IGFycmF5fVxuICogQHJldHVybiB7Q2h1bmt9XG4gKi9cbmNsYXNzIENodW5rIHtcblx0Y29uc3RydWN0b3IoZmllbGRzKSB7XG5cdFx0dGhpcy50eXBlID0gZmllbGRzLnR5cGU7XG5cdFx0dGhpcy5kYXRhID0gZmllbGRzLmRhdGE7XG5cdFx0dGhpcy5zaXplID0gWzAsIDAsIDAsIGZpZWxkcy5kYXRhLmxlbmd0aF07XG5cdH1cbn1cblxuZXhwb3J0IHtDaHVua307XG4iXX0=
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * MIDI file format constants, including note -> MIDI number translation.
 * @return {Constants}
 */

var Constants = {
	VERSION: '1.4.8',
	HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64], // Mthd
	HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06], // Header size for SMF
	HEADER_CHUNK_FORMAT0: [0x00, 0x00], // Midi Type 0 id
	HEADER_CHUNK_FORMAT1: [0x00, 0x01], // Midi Type 1 id
	HEADER_CHUNK_DIVISION: [0x00, 0x80], // Defaults to 128 ticks per beat
	TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b], // MTrk,
	META_EVENT_ID: 0xFF,
	META_TEXT_ID: 0x01,
	META_COPYRIGHT_ID: 0x02,
	META_TRACK_NAME_ID: 0x03,
	META_INSTRUMENT_NAME_ID: 0x04,
	META_LYRIC_ID: 0x05,
	META_MARKER_ID: 0x06,
	META_CUE_POINT: 0x07,
	META_TEMPO_ID: 0x51,
	META_SMTPE_OFFSET: 0x54,
	META_TIME_SIGNATURE_ID: 0x58,
	META_KEY_SIGNATURE_ID: 0x59,
	META_END_OF_TRACK_ID: [0x2F, 0x00],
	PROGRAM_CHANGE_STATUS: 0xC0 // includes channel number (0)
};

exports.Constants = Constants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiVkVSU0lPTiIsIkhFQURFUl9DSFVOS19UWVBFIiwiSEVBREVSX0NIVU5LX0xFTkdUSCIsIkhFQURFUl9DSFVOS19GT1JNQVQwIiwiSEVBREVSX0NIVU5LX0ZPUk1BVDEiLCJIRUFERVJfQ0hVTktfRElWSVNJT04iLCJUUkFDS19DSFVOS19UWVBFIiwiTUVUQV9FVkVOVF9JRCIsIk1FVEFfVEVYVF9JRCIsIk1FVEFfQ09QWVJJR0hUX0lEIiwiTUVUQV9UUkFDS19OQU1FX0lEIiwiTUVUQV9JTlNUUlVNRU5UX05BTUVfSUQiLCJNRVRBX0xZUklDX0lEIiwiTUVUQV9NQVJLRVJfSUQiLCJNRVRBX0NVRV9QT0lOVCIsIk1FVEFfVEVNUE9fSUQiLCJNRVRBX1NNVFBFX09GRlNFVCIsIk1FVEFfVElNRV9TSUdOQVRVUkVfSUQiLCJNRVRBX0tFWV9TSUdOQVRVUkVfSUQiLCJNRVRBX0VORF9PRl9UUkFDS19JRCIsIlBST0dSQU1fQ0hBTkdFX1NUQVRVUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7QUFLQSxJQUFJQSxZQUFZO0FBQ2ZDLFVBQWMsT0FEQztBQUVmQyxvQkFBdUIsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsQ0FGUixFQUVrQztBQUNqREMsc0JBQXdCLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLENBSFQsRUFHbUM7QUFDbERDLHVCQUEwQixDQUFDLElBQUQsRUFBTyxJQUFQLENBSlgsRUFJeUI7QUFDeENDLHVCQUEwQixDQUFDLElBQUQsRUFBTyxJQUFQLENBTFgsRUFLeUI7QUFDeENDLHdCQUEwQixDQUFDLElBQUQsRUFBTyxJQUFQLENBTlgsRUFNeUI7QUFDeENDLG1CQUFvQixDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixDQVBMLEVBTytCO0FBQzlDQyxnQkFBa0IsSUFSSDtBQVNmQyxlQUFpQixJQVRGO0FBVWZDLG9CQUFxQixJQVZOO0FBV2ZDLHFCQUFzQixJQVhQO0FBWWZDLDBCQUEwQixJQVpYO0FBYWZDLGdCQUFrQixJQWJIO0FBY2ZDLGlCQUFtQixJQWRKO0FBZWZDLGlCQUFtQixJQWZKO0FBZ0JmQyxnQkFBa0IsSUFoQkg7QUFpQmZDLG9CQUFxQixJQWpCTjtBQWtCZkMseUJBQXlCLElBbEJWO0FBbUJmQyx3QkFBd0IsSUFuQlQ7QUFvQmZDLHVCQUF1QixDQUFDLElBQUQsRUFBTyxJQUFQLENBcEJSO0FBcUJmQyx3QkFBd0IsSUFyQlQsQ0FxQmU7QUFyQmYsQ0FBaEI7O1FBd0JRckIsUyxHQUFBQSxTIiwiZmlsZSI6ImNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTUlESSBmaWxlIGZvcm1hdCBjb25zdGFudHMsIGluY2x1ZGluZyBub3RlIC0+IE1JREkgbnVtYmVyIHRyYW5zbGF0aW9uLlxuICogQHJldHVybiB7Q29uc3RhbnRzfVxuICovXG5cbnZhciBDb25zdGFudHMgPSB7XG5cdFZFUlNJT05cdFx0XHRcdFx0OiAnMS40LjgnLFxuXHRIRUFERVJfQ0hVTktfVFlQRSAgXHRcdDogWzB4NGQsIDB4NTQsIDB4NjgsIDB4NjRdLCAvLyBNdGhkXG5cdEhFQURFUl9DSFVOS19MRU5HVEggIFx0OiBbMHgwMCwgMHgwMCwgMHgwMCwgMHgwNl0sIC8vIEhlYWRlciBzaXplIGZvciBTTUZcblx0SEVBREVSX0NIVU5LX0ZPUk1BVDAgICAgOiBbMHgwMCwgMHgwMF0sIC8vIE1pZGkgVHlwZSAwIGlkXG5cdEhFQURFUl9DSFVOS19GT1JNQVQxICAgIDogWzB4MDAsIDB4MDFdLCAvLyBNaWRpIFR5cGUgMSBpZFxuXHRIRUFERVJfQ0hVTktfRElWSVNJT04gICA6IFsweDAwLCAweDgwXSwgLy8gRGVmYXVsdHMgdG8gMTI4IHRpY2tzIHBlciBiZWF0XG5cdFRSQUNLX0NIVU5LX1RZUEVcdFx0OiBbMHg0ZCwgMHg1NCwgMHg3MiwgMHg2Yl0sIC8vIE1UcmssXG5cdE1FVEFfRVZFTlRfSURcdFx0XHQ6IDB4RkYsXG5cdE1FVEFfVEVYVF9JRFx0XHRcdDogMHgwMSxcblx0TUVUQV9DT1BZUklHSFRfSURcdFx0OiAweDAyLFxuXHRNRVRBX1RSQUNLX05BTUVfSURcdFx0OiAweDAzLFxuXHRNRVRBX0lOU1RSVU1FTlRfTkFNRV9JRCA6IDB4MDQsXG5cdE1FVEFfTFlSSUNfSURcdFx0XHQ6IDB4MDUsXG5cdE1FVEFfTUFSS0VSX0lEXHRcdFx0OiAweDA2LFxuXHRNRVRBX0NVRV9QT0lOVFx0XHRcdDogMHgwNyxcblx0TUVUQV9URU1QT19JRFx0XHRcdDogMHg1MSxcblx0TUVUQV9TTVRQRV9PRkZTRVRcdFx0OiAweDU0LFxuXHRNRVRBX1RJTUVfU0lHTkFUVVJFX0lEXHQ6IDB4NTgsXG5cdE1FVEFfS0VZX1NJR05BVFVSRV9JRFx0OiAweDU5LFxuXHRNRVRBX0VORF9PRl9UUkFDS19JRFx0OiBbMHgyRiwgMHgwMF0sXG5cdFBST0dSQU1fQ0hBTkdFX1NUQVRVU1x0OiAweEMwLCAvLyBpbmNsdWRlcyBjaGFubmVsIG51bWJlciAoMClcbn07XG5cbmV4cG9ydCB7Q29uc3RhbnRzfTtcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Object representation of a meta event.
 * @param {object} fields - type, data
 * @return {MetaEvent}
 */
var MetaEvent = function MetaEvent(fields) {
	_classCallCheck(this, MetaEvent);

	this.type = 'meta';
	this.data = Utils.numberToVariableLength(0x00); // Start with zero time delta
	this.data = this.data.concat(Constants.META_EVENT_ID, fields.data);
};

exports.MetaEvent = MetaEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXRhLWV2ZW50LmpzIl0sIm5hbWVzIjpbIk1ldGFFdmVudCIsImZpZWxkcyIsInR5cGUiLCJkYXRhIiwiVXRpbHMiLCJudW1iZXJUb1ZhcmlhYmxlTGVuZ3RoIiwiY29uY2F0IiwiQ29uc3RhbnRzIiwiTUVUQV9FVkVOVF9JRCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7SUFLTUEsUyxHQUNMLG1CQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ25CLE1BQUtDLElBQUwsR0FBWSxNQUFaO0FBQ0EsTUFBS0MsSUFBTCxHQUFZQyxNQUFNQyxzQkFBTixDQUE2QixJQUE3QixDQUFaLENBRm1CLENBRTRCO0FBQy9DLE1BQUtGLElBQUwsR0FBWSxLQUFLQSxJQUFMLENBQVVHLE1BQVYsQ0FBaUJDLFVBQVVDLGFBQTNCLEVBQTBDUCxPQUFPRSxJQUFqRCxDQUFaO0FBQ0EsQzs7UUFHTUgsUyxHQUFBQSxTIiwiZmlsZSI6Im1ldGEtZXZlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhIG1ldGEgZXZlbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gZmllbGRzIC0gdHlwZSwgZGF0YVxuICogQHJldHVybiB7TWV0YUV2ZW50fVxuICovXG5jbGFzcyBNZXRhRXZlbnQge1xuXHRjb25zdHJ1Y3RvcihmaWVsZHMpIHtcblx0XHR0aGlzLnR5cGUgPSAnbWV0YSc7XG5cdFx0dGhpcy5kYXRhID0gVXRpbHMubnVtYmVyVG9WYXJpYWJsZUxlbmd0aCgweDAwKTsvLyBTdGFydCB3aXRoIHplcm8gdGltZSBkZWx0YVxuXHRcdHRoaXMuZGF0YSA9IHRoaXMuZGF0YS5jb25jYXQoQ29uc3RhbnRzLk1FVEFfRVZFTlRfSUQsIGZpZWxkcy5kYXRhKTtcblx0fVxufVxuXG5leHBvcnQge01ldGFFdmVudH07XG4iXX0=
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.
 * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}
 * @return {NoteEvent}
 */
var NoteEvent = function () {
	function NoteEvent(fields) {
		_classCallCheck(this, NoteEvent);

		this.type = 'note';
		this.pitch = fields.pitch;
		this.wait = fields.wait || 0;
		this.duration = fields.duration;
		this.sequential = fields.sequential || false;
		this.velocity = fields.velocity || 50;
		this.channel = fields.channel || 1;
		this.repeat = fields.repeat || 1;
		this.velocity = this.convertVelocity(this.velocity);
		this.buildData();
	}

	/**
  * Builds int array for this event.
  * @return {NoteEvent}
  */


	_createClass(NoteEvent, [{
		key: 'buildData',
		value: function buildData() {
			this.data = [];

			var tickDuration = this.getTickDuration(this.duration, 'note');
			var restDuration = this.getTickDuration(this.wait, 'rest');

			// fields.pitch could be an array of pitches.
			// If so create note events for each and apply the same duration.
			var noteOn, noteOff;
			if (Array.isArray(this.pitch)) {
				// By default this is a chord if it's an array of notes that requires one NoteOnEvent.
				// If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.
				if (!this.sequential) {
					// Handle repeat
					for (var j = 0; j < this.repeat; j++) {
						// Note on
						this.pitch.forEach(function (p, i) {
							if (i == 0) {
								noteOn = new NoteOnEvent({ data: Utils.numberToVariableLength(restDuration).concat(this.getNoteOnStatus(), Utils.getPitch(p), this.velocity) });
							} else {
								// Running status (can ommit the note on status)
								noteOn = new NoteOnEvent({ data: [0, Utils.getPitch(p), this.velocity] });
							}

							this.data = this.data.concat(noteOn.data);
						}, this);

						// Note off
						this.pitch.forEach(function (p, i) {
							if (i == 0) {
								noteOff = new NoteOffEvent({ data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), this.velocity) });
							} else {
								// Running status (can ommit the note off status)
								noteOff = new NoteOffEvent({ data: [0, Utils.getPitch(p), this.velocity] });
							}

							this.data = this.data.concat(noteOff.data);
						}, this);
					}
				} else {
					// Handle repeat
					for (var j = 0; j < this.repeat; j++) {
						this.pitch.forEach(function (p, i) {
							// restDuration only applies to first note
							if (i > 0) {
								restDuration = 0;
							}

							// If duration is 8th triplets we need to make sure that the total ticks == quarter note.
							// So, the last one will need to be the remainder
							if (this.duration === '8t' && i == this.pitch.length - 1) {
								var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);
								tickDuration = quarterTicks - tickDuration * 2;
							}

							noteOn = new NoteOnEvent({ data: Utils.numberToVariableLength(restDuration).concat([this.getNoteOnStatus(), Utils.getPitch(p), this.velocity]) });
							noteOff = new NoteOffEvent({ data: Utils.numberToVariableLength(tickDuration).concat([this.getNoteOffStatus(), Utils.getPitch(p), this.velocity]) });

							this.data = this.data.concat(noteOn.data, noteOff.data);
						}, this);
					}
				}

				return this;
			}

			throw 'pitch must be an array.';
		}
	}, {
		key: 'convertVelocity',


		/**
   * Converts velocity to value 0-127
   * @param {number} velocity - Velocity value 1-100
   * @return {number}
   */
		value: function convertVelocity(velocity) {
			// Max passed value limited to 100
			velocity = velocity > 100 ? 100 : velocity;
			return Math.round(velocity / 100 * 127);
		}
	}, {
		key: 'getTickDuration',


		/**
   * Gets the total number of ticks based on passed duration.
   * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
   * @param {(string|array)} duration
   * @param {string} type ['note', 'rest']
   * @return {number}
   */
		value: function getTickDuration(duration, type) {
			if (Array.isArray(duration)) {
				// Recursively execute this method for each item in the array and return the sum of tick durations.
				return duration.map(function (value) {
					return this.getTickDuration(value, type);
				}, this).reduce(function (a, b) {
					return a + b;
				}, 0);
			}

			duration = duration.toString();

			if (duration.toLowerCase().charAt(0) === 't') {
				// If duration starts with 't' then the number that follows is an explicit tick count
				return parseInt(duration.substring(1));
			}

			// Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION
			// Rounding only applies to triplets, which the remainder is handled below
			var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);
			return Math.round(quarterTicks * this.getDurationMultiplier(duration, type));
		}

		/**
   * Gets what to multiple ticks/quarter note by to get the specified duration.
   * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
   * @param {string} duration
   * @param {string} type ['note','rest']
   * @return {number}
   */

	}, {
		key: 'getDurationMultiplier',
		value: function getDurationMultiplier(duration, type) {
			// Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION
			switch (duration) {
				case '0':
					return 0;
				case '1':
					return 4;
				case '2':
					return 2;
				case 'd2':
					return 3;
				case '4':
					return 1;
				case 'd4':
					return 1.5;
				case '8':
					return 0.5;
				case '8t':
					// For 8th triplets, let's divide a quarter by 3, round to the nearest int, and substract the remainder to the last one.
					return 0.33;
				case 'd8':
					return 0.75;
				case '16':
					return 0.25;
				case '32':
					return 0.125;
				case '64':
					return 0.0625;
				default:
				// Notes default to a quarter, rests default to 0
				//return type === 'note' ? 1 : 0;
			}

			throw duration + ' is not a valid duration.';
		}
	}, {
		key: 'getNoteOnStatus',


		/**
   * Gets the note on status code based on the selected channel. 0x9{0-F}
   * Note on at channel 0 is 0x90 (144)
   * 0 = Ch 1
   * @return {number}
   */
		value: function getNoteOnStatus() {
			return 144 + this.channel - 1;
		}

		/**
   * Gets the note off status code based on the selected channel. 0x8{0-F}
   * Note off at channel 0 is 0x80 (128)
   * 0 = Ch 1
   * @return {number}
   */

	}, {
		key: 'getNoteOffStatus',
		value: function getNoteOffStatus() {
			return 128 + this.channel - 1;
		}
	}]);

	return NoteEvent;
}();

exports.NoteEvent = NoteEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a "note off" MIDI event
 * @param {object} fields {data: []}
 * @return {NoteOffEvent}
 */
var NoteOffEvent = function NoteOffEvent(fields) {
  _classCallCheck(this, NoteOffEvent);

  this.data = fields.data;
};

exports.NoteOffEvent = NoteOffEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ub3RlLW9mZi1ldmVudC5qcyJdLCJuYW1lcyI6WyJOb3RlT2ZmRXZlbnQiLCJmaWVsZHMiLCJkYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztJQUtNQSxZLEdBQ0wsc0JBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDbkIsT0FBS0MsSUFBTCxHQUFZRCxPQUFPQyxJQUFuQjtBQUNBLEM7O1FBR01GLFksR0FBQUEsWSIsImZpbGUiOiJub3RlLW9mZi1ldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSG9sZHMgYWxsIGRhdGEgZm9yIGEgXCJub3RlIG9mZlwiIE1JREkgZXZlbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBmaWVsZHMge2RhdGE6IFtdfVxuICogQHJldHVybiB7Tm90ZU9mZkV2ZW50fVxuICovXG5jbGFzcyBOb3RlT2ZmRXZlbnQge1xuXHRjb25zdHJ1Y3RvcihmaWVsZHMpIHtcblx0XHR0aGlzLmRhdGEgPSBmaWVsZHMuZGF0YTtcblx0fVxufVxuXG5leHBvcnQge05vdGVPZmZFdmVudH07XG4iXX0=
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a "note on" MIDI event
 * @param {object} fields {data: []}
 * @return {NoteOnEvent}
 */
var NoteOnEvent = function NoteOnEvent(fields) {
  _classCallCheck(this, NoteOnEvent);

  this.data = fields.data;
};

exports.NoteOnEvent = NoteOnEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ub3RlLW9uLWV2ZW50LmpzIl0sIm5hbWVzIjpbIk5vdGVPbkV2ZW50IiwiZmllbGRzIiwiZGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7SUFLTUEsVyxHQUNMLHFCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ25CLE9BQUtDLElBQUwsR0FBWUQsT0FBT0MsSUFBbkI7QUFDQSxDOztRQUdNRixXLEdBQUFBLFciLCJmaWxlIjoibm90ZS1vbi1ldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSG9sZHMgYWxsIGRhdGEgZm9yIGEgXCJub3RlIG9uXCIgTUlESSBldmVudFxuICogQHBhcmFtIHtvYmplY3R9IGZpZWxkcyB7ZGF0YTogW119XG4gKiBAcmV0dXJuIHtOb3RlT25FdmVudH1cbiAqL1xuY2xhc3MgTm90ZU9uRXZlbnQge1xuXHRjb25zdHJ1Y3RvcihmaWVsZHMpIHtcblx0XHR0aGlzLmRhdGEgPSBmaWVsZHMuZGF0YTtcblx0fVxufVxuXG5leHBvcnQge05vdGVPbkV2ZW50fTtcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a "program change" MIDI event
 * @param {object} fields {type: string, data: []}
 * @return {NoteOffEvent}
 */
var ProgramChangeEvent = function ProgramChangeEvent(fields) {
	_classCallCheck(this, ProgramChangeEvent);

	this.type = 'program';
	// delta time defaults to 0.
	this.data = Utils.numberToVariableLength(0x00).concat(Constants.PROGRAM_CHANGE_STATUS, fields.instrument);
};

exports.ProgramChangeEvent = ProgramChangeEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9ncmFtLWNoYW5nZS1ldmVudC5qcyJdLCJuYW1lcyI6WyJQcm9ncmFtQ2hhbmdlRXZlbnQiLCJmaWVsZHMiLCJ0eXBlIiwiZGF0YSIsIlV0aWxzIiwibnVtYmVyVG9WYXJpYWJsZUxlbmd0aCIsImNvbmNhdCIsIkNvbnN0YW50cyIsIlBST0dSQU1fQ0hBTkdFX1NUQVRVUyIsImluc3RydW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7O0lBS01BLGtCLEdBQ0wsNEJBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDbkIsTUFBS0MsSUFBTCxHQUFZLFNBQVo7QUFDQTtBQUNBLE1BQUtDLElBQUwsR0FBWUMsTUFBTUMsc0JBQU4sQ0FBNkIsSUFBN0IsRUFBbUNDLE1BQW5DLENBQTBDQyxVQUFVQyxxQkFBcEQsRUFBMkVQLE9BQU9RLFVBQWxGLENBQVo7QUFDQSxDOztRQUdNVCxrQixHQUFBQSxrQiIsImZpbGUiOiJwcm9ncmFtLWNoYW5nZS1ldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSG9sZHMgYWxsIGRhdGEgZm9yIGEgXCJwcm9ncmFtIGNoYW5nZVwiIE1JREkgZXZlbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBmaWVsZHMge3R5cGU6IHN0cmluZywgZGF0YTogW119XG4gKiBAcmV0dXJuIHtOb3RlT2ZmRXZlbnR9XG4gKi9cbmNsYXNzIFByb2dyYW1DaGFuZ2VFdmVudCB7XG5cdGNvbnN0cnVjdG9yKGZpZWxkcykge1xuXHRcdHRoaXMudHlwZSA9ICdwcm9ncmFtJztcblx0XHQvLyBkZWx0YSB0aW1lIGRlZmF1bHRzIHRvIDAuXG5cdFx0dGhpcy5kYXRhID0gVXRpbHMubnVtYmVyVG9WYXJpYWJsZUxlbmd0aCgweDAwKS5jb25jYXQoQ29uc3RhbnRzLlBST0dSQU1fQ0hBTkdFX1NUQVRVUywgZmllbGRzLmluc3RydW1lbnQpO1xuXHR9XG59XG5cbmV4cG9ydCB7UHJvZ3JhbUNoYW5nZUV2ZW50fTtcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a track.
 * @param {object} fields {type: number, data: array, size: array, events: array}
 * @return {Track}
 */
var Track = function () {
	function Track() {
		_classCallCheck(this, Track);

		this.type = Constants.TRACK_CHUNK_TYPE;
		this.data = [];
		this.size = [];
		this.events = [];
	}

	/**
  * Adds any event type to the track.
  * @param {(NoteEvent|MetaEvent|ProgramChangeEvent)} event - Event object.
  * @param {function} mapFunction - Callback which can be used to apply specific properties to all events. 
  * @return {Track}
  */


	_createClass(Track, [{
		key: 'addEvent',
		value: function addEvent(event, mapFunction) {
			if (Array.isArray(event)) {
				event.forEach(function (e, i) {
					// Handle map function if provided
					if (typeof mapFunction === 'function' && e.type === 'note') {
						var properties = mapFunction(i, e);

						if ((typeof properties === 'undefined' ? 'undefined' : _typeof(properties)) === 'object') {
							for (var j in properties) {
								switch (j) {
									case 'duration':
										e.duration = properties[j];
										break;
									case 'sequential':
										e.sequential = properties[j];
										break;
									case 'velocity':
										e.velocity = e.convertVelocity(properties[j]);
										break;
								}
							}

							// Gotta build that data
							e.buildData();
						}
					}

					this.data = this.data.concat(e.data);
					this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long
					this.events.push(e);
				}, this);
			} else {
				this.data = this.data.concat(event.data);
				this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long
				this.events.push(event);
			}

			return this;
		}

		/**
   * Sets tempo of the MIDI file.
   * @param {number} bpm - Tempo in beats per minute.
   * @return {Track}
   */

	}, {
		key: 'setTempo',
		value: function setTempo(bpm) {
			var event = new MetaEvent({ data: [Constants.META_TEMPO_ID] });
			event.data.push(0x03); // Size
			var tempo = Math.round(60000000 / bpm);
			event.data = event.data.concat(Utils.numberToBytes(tempo, 3)); // Tempo, 3 bytes
			return this.addEvent(event);
		}

		/**
   * Sets time signature.
   * @param {number} numerator - Top number of the time signature.
   * @param {number} denominator - Bottom number of the time signature.
   * @param {number} midiclockspertick - Defaults to 24.
   * @param {number} notespermidiclock - Defaults to 8.
   * @return {Track}
   */

	}, {
		key: 'setTimeSignature',
		value: function setTimeSignature(numerator, denominator, midiclockspertick, notespermidiclock) {
			midiclockspertick = midiclockspertick || 24;
			notespermidiclock = notespermidiclock || 8;

			var event = new MetaEvent({ data: [Constants.META_TIME_SIGNATURE_ID] });
			event.data.push(0x04); // Size
			event.data = event.data.concat(Utils.numberToBytes(numerator, 1)); // Numerator, 1 bytes

			var _denominator = Math.log2(denominator); // Denominator is expressed as pow of 2
			event.data = event.data.concat(Utils.numberToBytes(_denominator, 1)); // Denominator, 1 bytes
			event.data = event.data.concat(Utils.numberToBytes(midiclockspertick, 1)); // MIDI Clocks per tick, 1 bytes
			event.data = event.data.concat(Utils.numberToBytes(notespermidiclock, 1)); // Number of 1/32 notes per MIDI clocks, 1 bytes
			return this.addEvent(event);
		}

		/**
   * Sets key signature.
   * @param {*} sf - 
   * @param {*} mi -
   * @return {Track}
   */

	}, {
		key: 'setKeySignature',
		value: function setKeySignature(sf, mi) {
			var event = new MetaEvent({ data: [Constants.META_KEY_SIGNATURE_ID] });
			event.data.push(0x02); // Size

			var mode = mi || 0;
			sf = sf || 0;

			//	Function called with string notation
			if (typeof mi === 'undefined') {
				var fifths = [['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'], ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']];
				var _sflen = sf.length;
				var note = sf || 'C';

				if (sf[0] === sf[0].toLowerCase()) mode = 1;

				if (_sflen > 1) {
					switch (sf.charAt(_sflen - 1)) {
						case 'm':
							mode = 1;
							note = sf.charAt(0).toLowerCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
						case '-':
							mode = 1;
							note = sf.charAt(0).toLowerCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
						case 'M':
							mode = 0;
							note = sf.charAt(0).toUpperCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
						case '+':
							mode = 0;
							note = sf.charAt(0).toUpperCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
					}
				}

				var fifthindex = fifths[mode].indexOf(note);
				sf = fifthindex === -1 ? 0 : fifthindex - 7;
			}

			event.data = event.data.concat(Utils.numberToBytes(sf, 1)); // Number of sharp or flats ( < 0 flat; > 0 sharp)
			event.data = event.data.concat(Utils.numberToBytes(mode, 1)); // Mode: 0 major, 1 minor
			return this.addEvent(event);
		}

		/**
   * Adds text to MIDI file.
   * @param {string} text - Text to add.
   * @return {Track}
   */

	}, {
		key: 'addText',
		value: function addText(text) {
			var event = new MetaEvent({ data: [Constants.META_TEXT_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds copyright to MIDI file.
   * @param {string} text - Text of copyright line.
   * @return {Track}
   */

	}, {
		key: 'addCopyright',
		value: function addCopyright(text) {
			var event = new MetaEvent({ data: [Constants.META_COPYRIGHT_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds Sequence/Track Name.
   * @param {string} text - Text of track name.
   * @return {Track}
   */

	}, {
		key: 'addTrackName',
		value: function addTrackName(text) {
			var event = new MetaEvent({ data: [Constants.META_TRACK_NAME_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Sets instrument name of track.
   * @param {string} text - Name of instrument.
   * @return {Track}
   */

	}, {
		key: 'addInstrumentName',
		value: function addInstrumentName(text) {
			var event = new MetaEvent({ data: [Constants.META_INSTRUMENT_NAME_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds marker to MIDI file.
   * @param {string} text - Marker text.
   * @return {Track}
   */

	}, {
		key: 'addMarker',
		value: function addMarker(text) {
			var event = new MetaEvent({ data: [Constants.META_MARKER_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds cue point to MIDI file.
   * @param {string} text - Text of cue point.
   * @return {Track}
   */

	}, {
		key: 'addCuePoint',
		value: function addCuePoint(text) {
			var event = new MetaEvent({ data: [Constants.META_CUE_POINT] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds lyric to MIDI file.
   * @param {string} lyric - Lyric text to add.
   * @return {Track}
   */

	}, {
		key: 'addLyric',
		value: function addLyric(lyric) {
			var event = new MetaEvent({ data: [Constants.META_LYRIC_ID] });
			var stringBytes = Utils.stringToBytes(lyric);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Lyric
			return this.addEvent(event);
		}

		/**
   * Channel mode messages
   * @return {Track}
   */

	}, {
		key: 'polyModeOn',
		value: function polyModeOn() {
			var event = new NoteOnEvent({ data: [0x00, 0xB0, 0x7E, 0x00] });
			return this.addEvent(event);
		}
	}]);

	return Track;
}();

exports.Track = Track;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Utils = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tonalMidi = require('tonal-midi');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Static utility functions used throughout the library.
 */
var Utils = function () {
	function Utils() {
		_classCallCheck(this, Utils);
	}

	_createClass(Utils, null, [{
		key: 'version',


		/**
   * Gets MidiWriterJS version number.
   * @return {string}
   */
		value: function version() {
			return Constants.VERSION;
		}

		/**
   * Convert a string to an array of bytes
   * @param {string} string
   * @return {array}
   */

	}, {
		key: 'stringToBytes',
		value: function stringToBytes(string) {
			return string.split('').map(function (char) {
				return char.charCodeAt();
			});
		}

		/**
   * Checks if argument is a valid number.
   * @param {*} n - Value to check
   * @return {boolean}
   */

	}, {
		key: 'isNumeric',
		value: function isNumeric(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		/**
      * Returns the correct MIDI number for the specified pitch.
      * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi
      * @param {(string|number)} pitch - 'C#4' or midi note code
      * @return {number}
      */

	}, {
		key: 'getPitch',
		value: function getPitch(pitch) {
			return (0, _tonalMidi.toMidi)(pitch);
		}

		/**
   * Translates number of ticks to MIDI timestamp format, returning an array of
   * hex strings with the time values. Midi has a very particular time to express time,
   * take a good look at the spec before ever touching this function.
   * Thanks to https://github.com/sergi/jsmidi
   *
   * @param {number} ticks - Number of ticks to be translated
   * @return {array} - Bytes that form the MIDI time value
   */

	}, {
		key: 'numberToVariableLength',
		value: function numberToVariableLength(ticks) {
			var buffer = ticks & 0x7F;

			while (ticks = ticks >> 7) {
				buffer <<= 8;
				buffer |= ticks & 0x7F | 0x80;
			}

			var bList = [];
			while (true) {
				bList.push(buffer & 0xff);

				if (buffer & 0x80) buffer >>= 8;else {
					break;
				}
			}

			return bList;
		}

		/**
   * Counts number of bytes in string
   * @param {string} s
   * @return {array}
   */

	}, {
		key: 'stringByteCount',
		value: function stringByteCount(s) {
			return encodeURI(s).split(/%..|./).length - 1;
		}

		/**
   * Get an int from an array of bytes.
   * @param {array} bytes
   * @return {number}
   */

	}, {
		key: 'numberFromBytes',
		value: function numberFromBytes(bytes) {
			var hex = '';
			var stringResult;

			bytes.forEach(function (byte) {
				stringResult = byte.toString(16);

				// ensure string is 2 chars
				if (stringResult.length == 1) stringResult = "0" + stringResult;

				hex += stringResult;
			});

			return parseInt(hex, 16);
		}

		/**
   * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded
   * @param {number} number
   * @param {number} bytesNeeded
   * @return {array} - Array of bytes
   */

	}, {
		key: 'numberToBytes',
		value: function numberToBytes(number, bytesNeeded) {
			bytesNeeded = bytesNeeded || 1;

			var hexString = number.toString(16);

			if (hexString.length & 1) {
				// Make sure hex string is even number of chars
				hexString = '0' + hexString;
			}

			// Split hex string into an array of two char elements
			var hexArray = hexString.match(/.{2}/g);

			// Now parse them out as integers
			hexArray = hexArray.map(function (item) {
				return parseInt(item, 16);
			});

			// Prepend empty bytes if we don't have enough
			if (hexArray.length < bytesNeeded) {
				while (bytesNeeded - hexArray.length > 0) {
					hexArray.unshift(0);
				}
			}

			return hexArray;
		}
	}]);

	return Utils;
}();

exports.Utils = Utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJVdGlscyIsIkNvbnN0YW50cyIsIlZFUlNJT04iLCJzdHJpbmciLCJzcGxpdCIsIm1hcCIsImNoYXIiLCJjaGFyQ29kZUF0IiwibiIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwicGl0Y2giLCJ0aWNrcyIsImJ1ZmZlciIsImJMaXN0IiwicHVzaCIsInMiLCJlbmNvZGVVUkkiLCJsZW5ndGgiLCJieXRlcyIsImhleCIsInN0cmluZ1Jlc3VsdCIsImZvckVhY2giLCJieXRlIiwidG9TdHJpbmciLCJwYXJzZUludCIsIm51bWJlciIsImJ5dGVzTmVlZGVkIiwiaGV4U3RyaW5nIiwiaGV4QXJyYXkiLCJtYXRjaCIsIml0ZW0iLCJ1bnNoaWZ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7SUFHTUEsSzs7Ozs7Ozs7O0FBRUw7Ozs7NEJBSWlCO0FBQ2hCLFVBQU9DLFVBQVVDLE9BQWpCO0FBQ0E7O0FBRUQ7Ozs7Ozs7O2dDQUtxQkMsTSxFQUFRO0FBQzVCLFVBQU9BLE9BQU9DLEtBQVAsQ0FBYSxFQUFiLEVBQWlCQyxHQUFqQixDQUFxQjtBQUFBLFdBQVFDLEtBQUtDLFVBQUwsRUFBUjtBQUFBLElBQXJCLENBQVA7QUFDQTs7QUFFRDs7Ozs7Ozs7NEJBS2lCQyxDLEVBQUc7QUFDbkIsVUFBTyxDQUFDQyxNQUFNQyxXQUFXRixDQUFYLENBQU4sQ0FBRCxJQUF5QkcsU0FBU0gsQ0FBVCxDQUFoQztBQUNBOztBQUVEOzs7Ozs7Ozs7MkJBTW9CSSxLLEVBQU87QUFDdEIsVUFBTyx1QkFBT0EsS0FBUCxDQUFQO0FBQ0E7O0FBRUw7Ozs7Ozs7Ozs7Ozt5Q0FTOEJDLEssRUFBTztBQUNqQyxPQUFJQyxTQUFTRCxRQUFRLElBQXJCOztBQUVBLFVBQU9BLFFBQVFBLFNBQVMsQ0FBeEIsRUFBMkI7QUFDdkJDLGVBQVcsQ0FBWDtBQUNBQSxjQUFZRCxRQUFRLElBQVQsR0FBaUIsSUFBNUI7QUFDSDs7QUFFRCxPQUFJRSxRQUFRLEVBQVo7QUFDQSxVQUFPLElBQVAsRUFBYTtBQUNUQSxVQUFNQyxJQUFOLENBQVdGLFNBQVMsSUFBcEI7O0FBRUEsUUFBSUEsU0FBUyxJQUFiLEVBQW1CQSxXQUFXLENBQVgsQ0FBbkIsS0FDSztBQUFFO0FBQVE7QUFDbEI7O0FBRUQsVUFBT0MsS0FBUDtBQUNIOztBQUVEOzs7Ozs7OztrQ0FLdUJFLEMsRUFBRztBQUN6QixVQUFPQyxVQUFVRCxDQUFWLEVBQWFiLEtBQWIsQ0FBbUIsT0FBbkIsRUFBNEJlLE1BQTVCLEdBQXFDLENBQTVDO0FBQ0E7O0FBRUQ7Ozs7Ozs7O2tDQUt1QkMsSyxFQUFPO0FBQzdCLE9BQUlDLE1BQU0sRUFBVjtBQUNBLE9BQUlDLFlBQUo7O0FBRUFGLFNBQU1HLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDNUJGLG1CQUFlRSxLQUFLQyxRQUFMLENBQWMsRUFBZCxDQUFmOztBQUVBO0FBQ0EsUUFBSUgsYUFBYUgsTUFBYixJQUF1QixDQUEzQixFQUE4QkcsZUFBZSxNQUFNQSxZQUFyQjs7QUFFOUJELFdBQU9DLFlBQVA7QUFDQSxJQVBEOztBQVNBLFVBQU9JLFNBQVNMLEdBQVQsRUFBYyxFQUFkLENBQVA7QUFDQTs7QUFFRDs7Ozs7Ozs7O2dDQU1xQk0sTSxFQUFRQyxXLEVBQWE7QUFDekNBLGlCQUFjQSxlQUFlLENBQTdCOztBQUVBLE9BQUlDLFlBQVlGLE9BQU9GLFFBQVAsQ0FBZ0IsRUFBaEIsQ0FBaEI7O0FBRUEsT0FBSUksVUFBVVYsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUFFO0FBQzNCVSxnQkFBWSxNQUFNQSxTQUFsQjtBQUNBOztBQUVEO0FBQ0EsT0FBSUMsV0FBV0QsVUFBVUUsS0FBVixDQUFnQixPQUFoQixDQUFmOztBQUVBO0FBQ0FELGNBQVdBLFNBQVN6QixHQUFULENBQWE7QUFBQSxXQUFRcUIsU0FBU00sSUFBVCxFQUFlLEVBQWYsQ0FBUjtBQUFBLElBQWIsQ0FBWDs7QUFFQTtBQUNBLE9BQUlGLFNBQVNYLE1BQVQsR0FBa0JTLFdBQXRCLEVBQW1DO0FBQ2xDLFdBQU9BLGNBQWNFLFNBQVNYLE1BQXZCLEdBQWdDLENBQXZDLEVBQTBDO0FBQ3pDVyxjQUFTRyxPQUFULENBQWlCLENBQWpCO0FBQ0E7QUFDRDs7QUFFRCxVQUFPSCxRQUFQO0FBQ0E7Ozs7OztRQUdNOUIsSyxHQUFBQSxLIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0b01pZGl9IGZyb20gJ3RvbmFsLW1pZGknO1xuXG4vKipcbiAqIFN0YXRpYyB1dGlsaXR5IGZ1bmN0aW9ucyB1c2VkIHRocm91Z2hvdXQgdGhlIGxpYnJhcnkuXG4gKi9cbmNsYXNzIFV0aWxzIHtcblxuXHQvKipcblx0ICogR2V0cyBNaWRpV3JpdGVySlMgdmVyc2lvbiBudW1iZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdHN0YXRpYyB2ZXJzaW9uKCkge1xuXHRcdHJldHVybiBDb25zdGFudHMuVkVSU0lPTjtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGFuIGFycmF5IG9mIGJ5dGVzXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcblx0ICogQHJldHVybiB7YXJyYXl9XG5cdCAqL1xuXHRzdGF0aWMgc3RyaW5nVG9CeXRlcyhzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnNwbGl0KCcnKS5tYXAoY2hhciA9PiBjaGFyLmNoYXJDb2RlQXQoKSlcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYXJndW1lbnQgaXMgYSB2YWxpZCBudW1iZXIuXG5cdCAqIEBwYXJhbSB7Kn0gbiAtIFZhbHVlIHRvIGNoZWNrXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRzdGF0aWMgaXNOdW1lcmljKG4pIHtcblx0XHRyZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pXG5cdH1cblxuXHQvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb3JyZWN0IE1JREkgbnVtYmVyIGZvciB0aGUgc3BlY2lmaWVkIHBpdGNoLlxuICAgICAqIFVzZXMgVG9uYWwgTWlkaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZ2IvdG9uYWwvdHJlZS9tYXN0ZXIvcGFja2FnZXMvbWlkaVxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpfSBwaXRjaCAtICdDIzQnIG9yIG1pZGkgbm90ZSBjb2RlXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgICBzdGF0aWMgZ2V0UGl0Y2gocGl0Y2gpIHtcbiAgICAgXHRyZXR1cm4gdG9NaWRpKHBpdGNoKTtcbiAgICAgfVxuXG5cdC8qKlxuXHQgKiBUcmFuc2xhdGVzIG51bWJlciBvZiB0aWNrcyB0byBNSURJIHRpbWVzdGFtcCBmb3JtYXQsIHJldHVybmluZyBhbiBhcnJheSBvZlxuXHQgKiBoZXggc3RyaW5ncyB3aXRoIHRoZSB0aW1lIHZhbHVlcy4gTWlkaSBoYXMgYSB2ZXJ5IHBhcnRpY3VsYXIgdGltZSB0byBleHByZXNzIHRpbWUsXG5cdCAqIHRha2UgYSBnb29kIGxvb2sgYXQgdGhlIHNwZWMgYmVmb3JlIGV2ZXIgdG91Y2hpbmcgdGhpcyBmdW5jdGlvbi5cblx0ICogVGhhbmtzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zZXJnaS9qc21pZGlcblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpY2tzIC0gTnVtYmVyIG9mIHRpY2tzIHRvIGJlIHRyYW5zbGF0ZWRcblx0ICogQHJldHVybiB7YXJyYXl9IC0gQnl0ZXMgdGhhdCBmb3JtIHRoZSBNSURJIHRpbWUgdmFsdWVcblx0ICovXG5cdHN0YXRpYyBudW1iZXJUb1ZhcmlhYmxlTGVuZ3RoKHRpY2tzKSB7XG5cdCAgICB2YXIgYnVmZmVyID0gdGlja3MgJiAweDdGO1xuXG5cdCAgICB3aGlsZSAodGlja3MgPSB0aWNrcyA+PiA3KSB7XG5cdCAgICAgICAgYnVmZmVyIDw8PSA4O1xuXHQgICAgICAgIGJ1ZmZlciB8PSAoKHRpY2tzICYgMHg3RikgfCAweDgwKTtcblx0ICAgIH1cblxuXHQgICAgdmFyIGJMaXN0ID0gW107XG5cdCAgICB3aGlsZSAodHJ1ZSkge1xuXHQgICAgICAgIGJMaXN0LnB1c2goYnVmZmVyICYgMHhmZik7XG5cblx0ICAgICAgICBpZiAoYnVmZmVyICYgMHg4MCkgYnVmZmVyID4+PSA4XG5cdCAgICAgICAgZWxzZSB7IGJyZWFrOyB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBiTGlzdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb3VudHMgbnVtYmVyIG9mIGJ5dGVzIGluIHN0cmluZ1xuXHQgKiBAcGFyYW0ge3N0cmluZ30gc1xuXHQgKiBAcmV0dXJuIHthcnJheX1cblx0ICovXG5cdHN0YXRpYyBzdHJpbmdCeXRlQ291bnQocykge1xuXHRcdHJldHVybiBlbmNvZGVVUkkocykuc3BsaXQoLyUuLnwuLykubGVuZ3RoIC0gMVxuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBhbiBpbnQgZnJvbSBhbiBhcnJheSBvZiBieXRlcy5cblx0ICogQHBhcmFtIHthcnJheX0gYnl0ZXNcblx0ICogQHJldHVybiB7bnVtYmVyfVxuXHQgKi9cblx0c3RhdGljIG51bWJlckZyb21CeXRlcyhieXRlcykge1xuXHRcdHZhciBoZXggPSAnJztcblx0XHR2YXIgc3RyaW5nUmVzdWx0O1xuXG5cdFx0Ynl0ZXMuZm9yRWFjaChmdW5jdGlvbihieXRlKSB7XG5cdFx0XHRzdHJpbmdSZXN1bHQgPSBieXRlLnRvU3RyaW5nKDE2KTtcblxuXHRcdFx0Ly8gZW5zdXJlIHN0cmluZyBpcyAyIGNoYXJzXG5cdFx0XHRpZiAoc3RyaW5nUmVzdWx0Lmxlbmd0aCA9PSAxKSBzdHJpbmdSZXN1bHQgPSBcIjBcIiArIHN0cmluZ1Jlc3VsdFxuXG5cdFx0XHRoZXggKz0gc3RyaW5nUmVzdWx0O1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHBhcnNlSW50KGhleCwgMTYpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRha2VzIGEgbnVtYmVyIGFuZCBzcGxpdHMgaXQgdXAgaW50byBhbiBhcnJheSBvZiBieXRlcy4gIENhbiBiZSBwYWRkZWQgYnkgcGFzc2luZyBhIG51bWJlciB0byBieXRlc05lZWRlZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBieXRlc05lZWRlZFxuXHQgKiBAcmV0dXJuIHthcnJheX0gLSBBcnJheSBvZiBieXRlc1xuXHQgKi9cblx0c3RhdGljIG51bWJlclRvQnl0ZXMobnVtYmVyLCBieXRlc05lZWRlZCkge1xuXHRcdGJ5dGVzTmVlZGVkID0gYnl0ZXNOZWVkZWQgfHwgMTtcblxuXHRcdHZhciBoZXhTdHJpbmcgPSBudW1iZXIudG9TdHJpbmcoMTYpO1xuXG5cdFx0aWYgKGhleFN0cmluZy5sZW5ndGggJiAxKSB7IC8vIE1ha2Ugc3VyZSBoZXggc3RyaW5nIGlzIGV2ZW4gbnVtYmVyIG9mIGNoYXJzXG5cdFx0XHRoZXhTdHJpbmcgPSAnMCcgKyBoZXhTdHJpbmc7XG5cdFx0fVxuXG5cdFx0Ly8gU3BsaXQgaGV4IHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHR3byBjaGFyIGVsZW1lbnRzXG5cdFx0dmFyIGhleEFycmF5ID0gaGV4U3RyaW5nLm1hdGNoKC8uezJ9L2cpO1xuXG5cdFx0Ly8gTm93IHBhcnNlIHRoZW0gb3V0IGFzIGludGVnZXJzXG5cdFx0aGV4QXJyYXkgPSBoZXhBcnJheS5tYXAoaXRlbSA9PiBwYXJzZUludChpdGVtLCAxNikpXG5cblx0XHQvLyBQcmVwZW5kIGVtcHR5IGJ5dGVzIGlmIHdlIGRvbid0IGhhdmUgZW5vdWdoXG5cdFx0aWYgKGhleEFycmF5Lmxlbmd0aCA8IGJ5dGVzTmVlZGVkKSB7XG5cdFx0XHR3aGlsZSAoYnl0ZXNOZWVkZWQgLSBoZXhBcnJheS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGhleEFycmF5LnVuc2hpZnQoMCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhleEFycmF5O1xuXHR9XG59XG5cbmV4cG9ydCB7VXRpbHN9O1xuIl19
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VexFlow = function () {
	function VexFlow() {
		_classCallCheck(this, VexFlow);
	}
	// code...


	/**
  * Support for converting VexFlow voice into MidiWriterJS track
  * @return MidiWritier.Track object
  */


	_createClass(VexFlow, [{
		key: 'trackFromVoice',
		value: function trackFromVoice(voice) {
			var track = new Track();
			var wait;
			var pitches = [];

			voice.tickables.forEach(function (tickable, i) {
				pitches = [];

				if (tickable.noteType === 'n') {
					notes[i].keys.forEach(function (key) {
						// build array of pitches
						pitches.push(this.convertPitch(key));
					});
				} else if (tickable.noteType === 'r') {
					// move on to the next tickable and use this rest as a `wait` property for the next event
					wait = this.convertDuration(tickable);
					return;
				}

				track.addEvent(new NoteEvent({ pitch: pitches, duration: this.convertDuration(voice.tickables[i]), wait: wait }));

				// reset wait
				wait = 0;
			});

			return track;
		}

		/**
   * Converts VexFlow pitch syntax to MidiWriterJS syntax
   * @param pitch string
   */

	}, {
		key: 'convertPitch',
		value: function convertPitch(pitch) {
			return pitch.replace('/', '');
		}

		/**
   * Converts VexFlow duration syntax to MidiWriterJS syntax
   * @param note struct from VexFlow
   */

	}, {
		key: 'convertDuration',
		value: function convertDuration(note) {
			switch (note.duration) {
				case 'w':
					return '1';
				case 'h':
					return note.isDotted() ? 'd2' : '2';
				case 'q':
					return note.isDotted() ? 'd4' : '4';
				case '8':
					return note.isDotted() ? 'd8' : '8';
			}

			return note.duration;
		}
	}]);

	return VexFlow;
}();

exports.VexFlow = VexFlow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92ZXhmbG93LmpzIl0sIm5hbWVzIjpbIlZleEZsb3ciLCJ2b2ljZSIsInRyYWNrIiwiVHJhY2siLCJ3YWl0IiwicGl0Y2hlcyIsInRpY2thYmxlcyIsImZvckVhY2giLCJ0aWNrYWJsZSIsImkiLCJub3RlVHlwZSIsIm5vdGVzIiwia2V5cyIsImtleSIsInB1c2giLCJjb252ZXJ0UGl0Y2giLCJjb252ZXJ0RHVyYXRpb24iLCJhZGRFdmVudCIsIk5vdGVFdmVudCIsInBpdGNoIiwiZHVyYXRpb24iLCJyZXBsYWNlIiwibm90ZSIsImlzRG90dGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQU1BLE87QUFFTCxvQkFBYztBQUFBO0FBRWI7QUFEQTs7O0FBR0Q7Ozs7Ozs7O2lDQUllQyxLLEVBQU87QUFDckIsT0FBSUMsUUFBUSxJQUFJQyxLQUFKLEVBQVo7QUFDQSxPQUFJQyxJQUFKO0FBQ0EsT0FBSUMsVUFBVSxFQUFkOztBQUVBSixTQUFNSyxTQUFOLENBQWdCQyxPQUFoQixDQUF3QixVQUFTQyxRQUFULEVBQW1CQyxDQUFuQixFQUFzQjtBQUM3Q0osY0FBVSxFQUFWOztBQUVBLFFBQUlHLFNBQVNFLFFBQVQsS0FBc0IsR0FBMUIsRUFBK0I7QUFDOUJDLFdBQU1GLENBQU4sRUFBU0csSUFBVCxDQUFjTCxPQUFkLENBQXNCLFVBQVNNLEdBQVQsRUFBYztBQUNuQztBQUNBUixjQUFRUyxJQUFSLENBQWEsS0FBS0MsWUFBTCxDQUFrQkYsR0FBbEIsQ0FBYjtBQUNBLE1BSEQ7QUFLQSxLQU5ELE1BTU8sSUFBSUwsU0FBU0UsUUFBVCxLQUFzQixHQUExQixFQUErQjtBQUNyQztBQUNBTixZQUFPLEtBQUtZLGVBQUwsQ0FBcUJSLFFBQXJCLENBQVA7QUFDQTtBQUNBOztBQUVETixVQUFNZSxRQUFOLENBQWUsSUFBSUMsU0FBSixDQUFjLEVBQUNDLE9BQU9kLE9BQVIsRUFBaUJlLFVBQVUsS0FBS0osZUFBTCxDQUFxQmYsTUFBTUssU0FBTixDQUFnQkcsQ0FBaEIsQ0FBckIsQ0FBM0IsRUFBcUVMLE1BQU1BLElBQTNFLEVBQWQsQ0FBZjs7QUFFQTtBQUNBQSxXQUFPLENBQVA7QUFDQSxJQW5CRDs7QUFxQkEsVUFBT0YsS0FBUDtBQUNBOztBQUdEOzs7Ozs7OytCQUlhaUIsSyxFQUFPO0FBQ25CLFVBQU9BLE1BQU1FLE9BQU4sQ0FBYyxHQUFkLEVBQW1CLEVBQW5CLENBQVA7QUFDQTs7QUFHRDs7Ozs7OztrQ0FJZ0JDLEksRUFBTTtBQUNyQixXQUFRQSxLQUFLRixRQUFiO0FBQ0MsU0FBSyxHQUFMO0FBQ0MsWUFBTyxHQUFQO0FBQ0QsU0FBSyxHQUFMO0FBQ0MsWUFBT0UsS0FBS0MsUUFBTCxLQUFrQixJQUFsQixHQUF5QixHQUFoQztBQUNELFNBQUssR0FBTDtBQUNDLFlBQU9ELEtBQUtDLFFBQUwsS0FBa0IsSUFBbEIsR0FBeUIsR0FBaEM7QUFDRCxTQUFLLEdBQUw7QUFDQyxZQUFPRCxLQUFLQyxRQUFMLEtBQWtCLElBQWxCLEdBQXlCLEdBQWhDO0FBUkY7O0FBV0EsVUFBT0QsS0FBS0YsUUFBWjtBQUNBOzs7Ozs7UUFHTXBCLE8sR0FBQUEsTyIsImZpbGUiOiJ2ZXhmbG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmV4RmxvdyB7XG5cdFxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvLyBjb2RlLi4uXG5cdH1cblxuXHQvKipcblx0ICogU3VwcG9ydCBmb3IgY29udmVydGluZyBWZXhGbG93IHZvaWNlIGludG8gTWlkaVdyaXRlckpTIHRyYWNrXG5cdCAqIEByZXR1cm4gTWlkaVdyaXRpZXIuVHJhY2sgb2JqZWN0XG5cdCAqL1xuXHR0cmFja0Zyb21Wb2ljZSh2b2ljZSkge1xuXHRcdHZhciB0cmFjayA9IG5ldyBUcmFjaygpO1xuXHRcdHZhciB3YWl0O1xuXHRcdHZhciBwaXRjaGVzID0gW107XG5cblx0XHR2b2ljZS50aWNrYWJsZXMuZm9yRWFjaChmdW5jdGlvbih0aWNrYWJsZSwgaSkge1xuXHRcdFx0cGl0Y2hlcyA9IFtdO1xuXG5cdFx0XHRpZiAodGlja2FibGUubm90ZVR5cGUgPT09ICduJykge1xuXHRcdFx0XHRub3Rlc1tpXS5rZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRcdFx0Ly8gYnVpbGQgYXJyYXkgb2YgcGl0Y2hlc1xuXHRcdFx0XHRcdHBpdGNoZXMucHVzaCh0aGlzLmNvbnZlcnRQaXRjaChrZXkpKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdH0gZWxzZSBpZiAodGlja2FibGUubm90ZVR5cGUgPT09ICdyJykge1xuXHRcdFx0XHQvLyBtb3ZlIG9uIHRvIHRoZSBuZXh0IHRpY2thYmxlIGFuZCB1c2UgdGhpcyByZXN0IGFzIGEgYHdhaXRgIHByb3BlcnR5IGZvciB0aGUgbmV4dCBldmVudFxuXHRcdFx0XHR3YWl0ID0gdGhpcy5jb252ZXJ0RHVyYXRpb24odGlja2FibGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRyYWNrLmFkZEV2ZW50KG5ldyBOb3RlRXZlbnQoe3BpdGNoOiBwaXRjaGVzLCBkdXJhdGlvbjogdGhpcy5jb252ZXJ0RHVyYXRpb24odm9pY2UudGlja2FibGVzW2ldKSwgd2FpdDogd2FpdH0pKTtcblx0XHRcdFxuXHRcdFx0Ly8gcmVzZXQgd2FpdFxuXHRcdFx0d2FpdCA9IDA7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdHJhY2s7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBWZXhGbG93IHBpdGNoIHN5bnRheCB0byBNaWRpV3JpdGVySlMgc3ludGF4XG5cdCAqIEBwYXJhbSBwaXRjaCBzdHJpbmdcblx0ICovXG5cdGNvbnZlcnRQaXRjaChwaXRjaCkge1xuXHRcdHJldHVybiBwaXRjaC5yZXBsYWNlKCcvJywgJycpO1xuXHR9IFxuXG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIFZleEZsb3cgZHVyYXRpb24gc3ludGF4IHRvIE1pZGlXcml0ZXJKUyBzeW50YXhcblx0ICogQHBhcmFtIG5vdGUgc3RydWN0IGZyb20gVmV4Rmxvd1xuXHQgKi9cblx0Y29udmVydER1cmF0aW9uKG5vdGUpIHtcblx0XHRzd2l0Y2ggKG5vdGUuZHVyYXRpb24pIHtcblx0XHRcdGNhc2UgJ3cnOlxuXHRcdFx0XHRyZXR1cm4gJzEnO1xuXHRcdFx0Y2FzZSAnaCc6XG5cdFx0XHRcdHJldHVybiBub3RlLmlzRG90dGVkKCkgPyAnZDInIDogJzInO1xuXHRcdFx0Y2FzZSAncSc6XG5cdFx0XHRcdHJldHVybiBub3RlLmlzRG90dGVkKCkgPyAnZDQnIDogJzQnO1xuXHRcdFx0Y2FzZSAnOCc6XG5cdFx0XHRcdHJldHVybiBub3RlLmlzRG90dGVkKCkgPyAnZDgnIDogJzgnO1xuXHRcdH1cblxuXHRcdHJldHVybiBub3RlLmR1cmF0aW9uO1xuXHR9O1xufVxuXG5leHBvcnQge1ZleEZsb3d9O1xuIl19
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Object that puts together tracks and provides methods for file output.
 * @param {array} tracks - An array of {Track} objects.
 * @return {Writer}
 */
var Writer = function () {
	function Writer(tracks) {
		_classCallCheck(this, Writer);

		this.data = [];

		var trackType = tracks.length > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;
		var numberOfTracks = Utils.numberToBytes(tracks.length, 2); // two bytes long

		// Header chunk
		this.data.push(new Chunk({
			type: Constants.HEADER_CHUNK_TYPE,
			data: trackType.concat(numberOfTracks, Constants.HEADER_CHUNK_DIVISION) }));

		// Track chunks
		tracks.forEach(function (track, i) {
			track.addEvent(new MetaEvent({ data: Constants.META_END_OF_TRACK_ID }));
			this.data.push(track);
		}, this);
	}

	/**
  * Builds the file into a Uint8Array
  * @return {Uint8Array}
  */


	_createClass(Writer, [{
		key: 'buildFile',
		value: function buildFile() {
			var build = [];

			// Data consists of chunks which consists of data
			this.data.forEach(function (d) {
				return build = build.concat(d.type, d.size, d.data);
			});

			return new Uint8Array(build);
		}

		/**
   * Convert file buffer to a base64 string.  Different methods depending on if browser or node.
   * @return {string}
   */

	}, {
		key: 'base64',
		value: function base64() {
			if (typeof btoa === 'function') return btoa(String.fromCharCode.apply(null, this.buildFile()));
			return new Buffer(this.buildFile()).toString('base64');
		}

		/**
   * Get the data URI.
   * @return {string}
   */

	}, {
		key: 'dataUri',
		value: function dataUri() {
			return 'data:audio/midi;base64,' + this.base64();
		}

		/**
   * Output to stdout
   * @return {string}
   */

	}, {
		key: 'stdout',
		value: function stdout() {
			return process.stdout.write(new Buffer(this.buildFile()));
		}

		/**
   * Save to MIDI file
   * @param {string} filename
   */

	}, {
		key: 'saveMIDI',
		value: function saveMIDI(filename) {
			var buffer = new Buffer(this.buildFile());
			fs.writeFile(filename + '.mid', buffer, function (err) {
				if (err) return console.log(err);
			});
		}
	}]);

	return Writer;
}();

exports.Writer = Writer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93cml0ZXIuanMiXSwibmFtZXMiOlsiV3JpdGVyIiwidHJhY2tzIiwiZGF0YSIsInRyYWNrVHlwZSIsImxlbmd0aCIsIkNvbnN0YW50cyIsIkhFQURFUl9DSFVOS19GT1JNQVQxIiwiSEVBREVSX0NIVU5LX0ZPUk1BVDAiLCJudW1iZXJPZlRyYWNrcyIsIlV0aWxzIiwibnVtYmVyVG9CeXRlcyIsInB1c2giLCJDaHVuayIsInR5cGUiLCJIRUFERVJfQ0hVTktfVFlQRSIsImNvbmNhdCIsIkhFQURFUl9DSFVOS19ESVZJU0lPTiIsImZvckVhY2giLCJ0cmFjayIsImkiLCJhZGRFdmVudCIsIk1ldGFFdmVudCIsIk1FVEFfRU5EX09GX1RSQUNLX0lEIiwiYnVpbGQiLCJkIiwic2l6ZSIsIlVpbnQ4QXJyYXkiLCJidG9hIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJidWlsZEZpbGUiLCJCdWZmZXIiLCJ0b1N0cmluZyIsImJhc2U2NCIsInByb2Nlc3MiLCJzdGRvdXQiLCJ3cml0ZSIsImZpbGVuYW1lIiwiYnVmZmVyIiwiZnMiLCJ3cml0ZUZpbGUiLCJlcnIiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7O0lBS01BLE07QUFDTCxpQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUNuQixPQUFLQyxJQUFMLEdBQVksRUFBWjs7QUFFQSxNQUFJQyxZQUFZRixPQUFPRyxNQUFQLEdBQWdCLENBQWhCLEdBQW9CQyxVQUFVQyxvQkFBOUIsR0FBcURELFVBQVVFLG9CQUEvRTtBQUNBLE1BQUlDLGlCQUFpQkMsTUFBTUMsYUFBTixDQUFvQlQsT0FBT0csTUFBM0IsRUFBbUMsQ0FBbkMsQ0FBckIsQ0FKbUIsQ0FJeUM7O0FBRTVEO0FBQ0EsT0FBS0YsSUFBTCxDQUFVUyxJQUFWLENBQWUsSUFBSUMsS0FBSixDQUFVO0FBQ25CQyxTQUFNUixVQUFVUyxpQkFERztBQUVuQlosU0FBTUMsVUFBVVksTUFBVixDQUFpQlAsY0FBakIsRUFBaUNILFVBQVVXLHFCQUEzQyxDQUZhLEVBQVYsQ0FBZjs7QUFJQTtBQUNBZixTQUFPZ0IsT0FBUCxDQUFlLFVBQVNDLEtBQVQsRUFBZ0JDLENBQWhCLEVBQW1CO0FBQ2pDRCxTQUFNRSxRQUFOLENBQWUsSUFBSUMsU0FBSixDQUFjLEVBQUNuQixNQUFNRyxVQUFVaUIsb0JBQWpCLEVBQWQsQ0FBZjtBQUNBLFFBQUtwQixJQUFMLENBQVVTLElBQVYsQ0FBZU8sS0FBZjtBQUNBLEdBSEQsRUFHRyxJQUhIO0FBSUE7O0FBRUQ7Ozs7Ozs7OzhCQUlZO0FBQ1gsT0FBSUssUUFBUSxFQUFaOztBQUVBO0FBQ0EsUUFBS3JCLElBQUwsQ0FBVWUsT0FBVixDQUFrQixVQUFDTyxDQUFEO0FBQUEsV0FBT0QsUUFBUUEsTUFBTVIsTUFBTixDQUFhUyxFQUFFWCxJQUFmLEVBQXFCVyxFQUFFQyxJQUF2QixFQUE2QkQsRUFBRXRCLElBQS9CLENBQWY7QUFBQSxJQUFsQjs7QUFFQSxVQUFPLElBQUl3QixVQUFKLENBQWVILEtBQWYsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7OzJCQUlTO0FBQ1IsT0FBSSxPQUFPSSxJQUFQLEtBQWdCLFVBQXBCLEVBQWdDLE9BQU9BLEtBQUtDLE9BQU9DLFlBQVAsQ0FBb0JDLEtBQXBCLENBQTBCLElBQTFCLEVBQWdDLEtBQUtDLFNBQUwsRUFBaEMsQ0FBTCxDQUFQO0FBQ2hDLFVBQU8sSUFBSUMsTUFBSixDQUFXLEtBQUtELFNBQUwsRUFBWCxFQUE2QkUsUUFBN0IsQ0FBc0MsUUFBdEMsQ0FBUDtBQUNBOztBQUVFOzs7Ozs7OzRCQUlVO0FBQ1QsVUFBTyw0QkFBNEIsS0FBS0MsTUFBTCxFQUFuQztBQUNBOztBQUVKOzs7Ozs7OzJCQUlZO0FBQ1IsVUFBT0MsUUFBUUMsTUFBUixDQUFlQyxLQUFmLENBQXFCLElBQUlMLE1BQUosQ0FBVyxLQUFLRCxTQUFMLEVBQVgsQ0FBckIsQ0FBUDtBQUNBOztBQUVKOzs7Ozs7OzJCQUlTTyxRLEVBQVU7QUFDbEIsT0FBSUMsU0FBUyxJQUFJUCxNQUFKLENBQVcsS0FBS0QsU0FBTCxFQUFYLENBQWI7QUFDQVMsTUFBR0MsU0FBSCxDQUFhSCxXQUFXLE1BQXhCLEVBQWdDQyxNQUFoQyxFQUF3QyxVQUFVRyxHQUFWLEVBQWU7QUFDdEQsUUFBR0EsR0FBSCxFQUFRLE9BQU9DLFFBQVFDLEdBQVIsQ0FBWUYsR0FBWixDQUFQO0FBQ1IsSUFGRDtBQUdBOzs7Ozs7UUFHTTFDLE0sR0FBQUEsTSIsImZpbGUiOiJ3cml0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9iamVjdCB0aGF0IHB1dHMgdG9nZXRoZXIgdHJhY2tzIGFuZCBwcm92aWRlcyBtZXRob2RzIGZvciBmaWxlIG91dHB1dC5cbiAqIEBwYXJhbSB7YXJyYXl9IHRyYWNrcyAtIEFuIGFycmF5IG9mIHtUcmFja30gb2JqZWN0cy5cbiAqIEByZXR1cm4ge1dyaXRlcn1cbiAqL1xuY2xhc3MgV3JpdGVyIHtcblx0Y29uc3RydWN0b3IodHJhY2tzKSB7XG5cdFx0dGhpcy5kYXRhID0gW107XG5cblx0XHR2YXIgdHJhY2tUeXBlID0gdHJhY2tzLmxlbmd0aCA+IDEgPyBDb25zdGFudHMuSEVBREVSX0NIVU5LX0ZPUk1BVDEgOiBDb25zdGFudHMuSEVBREVSX0NIVU5LX0ZPUk1BVDA7XG5cdFx0dmFyIG51bWJlck9mVHJhY2tzID0gVXRpbHMubnVtYmVyVG9CeXRlcyh0cmFja3MubGVuZ3RoLCAyKTsgLy8gdHdvIGJ5dGVzIGxvbmdcblxuXHRcdC8vIEhlYWRlciBjaHVua1xuXHRcdHRoaXMuZGF0YS5wdXNoKG5ldyBDaHVuayh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogQ29uc3RhbnRzLkhFQURFUl9DSFVOS19UWVBFLFxuXHRcdFx0XHRcdFx0XHRcdGRhdGE6IHRyYWNrVHlwZS5jb25jYXQobnVtYmVyT2ZUcmFja3MsIENvbnN0YW50cy5IRUFERVJfQ0hVTktfRElWSVNJT04pfSkpO1xuXG5cdFx0Ly8gVHJhY2sgY2h1bmtzXG5cdFx0dHJhY2tzLmZvckVhY2goZnVuY3Rpb24odHJhY2ssIGkpIHtcblx0XHRcdHRyYWNrLmFkZEV2ZW50KG5ldyBNZXRhRXZlbnQoe2RhdGE6IENvbnN0YW50cy5NRVRBX0VORF9PRl9UUkFDS19JRH0pKTtcblx0XHRcdHRoaXMuZGF0YS5wdXNoKHRyYWNrKTtcblx0XHR9LCB0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCdWlsZHMgdGhlIGZpbGUgaW50byBhIFVpbnQ4QXJyYXlcblx0ICogQHJldHVybiB7VWludDhBcnJheX1cblx0ICovXG5cdGJ1aWxkRmlsZSgpIHtcblx0XHR2YXIgYnVpbGQgPSBbXTtcblxuXHRcdC8vIERhdGEgY29uc2lzdHMgb2YgY2h1bmtzIHdoaWNoIGNvbnNpc3RzIG9mIGRhdGFcblx0XHR0aGlzLmRhdGEuZm9yRWFjaCgoZCkgPT4gYnVpbGQgPSBidWlsZC5jb25jYXQoZC50eXBlLCBkLnNpemUsIGQuZGF0YSkpO1xuXG5cdFx0cmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1aWxkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0IGZpbGUgYnVmZmVyIHRvIGEgYmFzZTY0IHN0cmluZy4gIERpZmZlcmVudCBtZXRob2RzIGRlcGVuZGluZyBvbiBpZiBicm93c2VyIG9yIG5vZGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGJhc2U2NCgpIHtcblx0XHRpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHJldHVybiBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdGhpcy5idWlsZEZpbGUoKSkpO1xuXHRcdHJldHVybiBuZXcgQnVmZmVyKHRoaXMuYnVpbGRGaWxlKCkpLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0fVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkYXRhIFVSSS5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgZGF0YVVyaSgpIHtcbiAgICBcdHJldHVybiAnZGF0YTphdWRpby9taWRpO2Jhc2U2NCwnICsgdGhpcy5iYXNlNjQoKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIE91dHB1dCB0byBzdGRvdXRcblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cbiAgICBzdGRvdXQoKSB7XG4gICAgXHRyZXR1cm4gcHJvY2Vzcy5zdGRvdXQud3JpdGUobmV3IEJ1ZmZlcih0aGlzLmJ1aWxkRmlsZSgpKSk7XG4gICAgfVxuXG5cdC8qKlxuXHQgKiBTYXZlIHRvIE1JREkgZmlsZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcblx0ICovXG5cdHNhdmVNSURJKGZpbGVuYW1lKSB7XG5cdFx0dmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIodGhpcy5idWlsZEZpbGUoKSk7XG5cdFx0ZnMud3JpdGVGaWxlKGZpbGVuYW1lICsgJy5taWQnLCBidWZmZXIsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdGlmKGVycikgcmV0dXJuIGNvbnNvbGUubG9nKGVycik7XG5cdFx0fSk7XG5cdH1cbn1cblxuZXhwb3J0IHtXcml0ZXJ9O1xuIl19

{
  "_args": [
    [
      {
        "raw": "solr-client@^0.7.0",
        "scope": null,
        "escapedName": "solr-client",
        "name": "solr-client",
        "rawSpec": "^0.7.0",
        "spec": ">=0.7.0 <0.8.0",
        "type": "range"
      },
      "C:\\Users\\garre_000\\git\\chord-gen\\node_modules\\watson-developer-cloud"
    ]
  ],
  "_from": "solr-client@>=0.7.0 <0.8.0",
  "_id": "solr-client@0.7.0",
  "_inCache": true,
  "_location": "/solr-client",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/solr-client-0.7.0.tgz_1495188533535_0.40378646715544164"
  },
  "_npmUser": {
    "name": "nicolasembleton",
    "email": "nicolas.embleton@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "solr-client@^0.7.0",
    "scope": null,
    "escapedName": "solr-client",
    "name": "solr-client",
    "rawSpec": "^0.7.0",
    "spec": ">=0.7.0 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/watson-developer-cloud"
  ],
  "_resolved": "https://registry.npmjs.org/solr-client/-/solr-client-0.7.0.tgz",
  "_shasum": "b80fcca6c877683d5718b75a177264f12207b7b8",
  "_shrinkwrap": null,
  "_spec": "solr-client@^0.7.0",
  "_where": "C:\\Users\\garre_000\\git\\chord-gen\\node_modules\\watson-developer-cloud",
  "author": {
    "name": "Remy Loubradou",
    "email": "remy.loubradou@gmail.com",
    "url": "https://twitter.com/#!/lbdremy"
  },
  "bugs": {
    "url": "https://github.com/lbdremy/solr-node-client/issues"
  },
  "dependencies": {
    "JSONStream": "~1.0.6",
    "bluebird": "^3.5.0",
    "duplexer": "~0.1.1",
    "httperror": "~0.2.3",
    "json-bigint": "~0.1.4",
    "request": "~2.81.0"
  },
  "description": " A Solr client library for indexing, adding, deleting, committing, optimizing and searching documents within an Apache Solr installation (version>=3.2)",
  "devDependencies": {
    "bignumber.js": "~2.0.7",
    "chai": "~3.3.0",
    "csv-stream": "~0.1.3",
    "figc": "~0.0.3",
    "minimist": "~1.2.0",
    "mocha": "~2.3.3"
  },
  "directories": {},
  "dist": {
    "shasum": "b80fcca6c877683d5718b75a177264f12207b7b8",
    "tarball": "https://registry.npmjs.org/solr-client/-/solr-client-0.7.0.tgz"
  },
  "engines": {
    "node": ">= 0.4.7"
  },
  "gitHead": "2730eaef8daf5326a3253e49a0cdf627149cfd3e",
  "homepage": "https://github.com/lbdremy/solr-node-client#readme",
  "license": "MIT",
  "main": "./main",
  "maintainers": [
    {
      "name": "lbdremy",
      "email": "remyloubradou@gmail.com"
    },
    {
      "name": "luketaverne",
      "email": "luketaverne@gmail.com"
    },
    {
      "name": "nicolasembleton",
      "email": "nicolas.embleton@gmail.com"
    }
  ],
  "name": "solr-client",
  "optionalDependencies": {},
  "readme": "# solr-client - a node.js solr client\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/lbdremy/solr-node-client?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![](https://secure.travis-ci.org/lbdremy/solr-node-client.png)](http://travis-ci.org/#!/lbdremy/solr-node-client) [![Dependency Status](https://gemnasium.com/lbdremy/solr-node-client.png)](https://gemnasium.com/lbdremy/solr-node-client)\n\n[![NPM](https://nodei.co/npm/solr-client.png?downloads=true&stars=true)](https://nodei.co/npm/solr-client/)\n\n\n## Installation\n\nThis module is distributed using [npm](https://npmjs.com) which comes bundled with [node](https://nodejs.org):\n\n```console\nnpm install --save solr-client\n```\n\n\n## Features\n\n### Latest (0.6.0)\n\n- Solr5 Query-Highlighting support through StandardHighlighter (@LukeTaverne) (https://github.com/lbdremy/solr-node-client/pull/144)\n- Experimental support for SolrCloud collections administration (@LukeTaverne) (https://github.com/lbdremy/solr-node-client/issues/138)\n- Support for large query through POST via configurable automatic switch (@kfitzgerald) (https://github.com/lbdremy/solr-node-client/pull/129) \n- Set Default Field (query.df()) (@cbarrientos-ias) (https://github.com/lbdremy/solr-node-client/pull/137)\n- Adds support for facet.pivot and facet.pivot.mincount (@nicolasembleton) (https://github.com/lbdremy/solr-node-client/issues/146)\n \nNoticeable change: You can now pass a solrVersion to the Client initialization so it will activate features that  are only supported \nby your version or higher. Be sure to check the documentation\n\n### 0.5.0\n\n- Commands supported: search(select), add, delete, update, commit, rollback, optimize, ping, real-time get, prepare commit, soft commit, arbitrary search handler (i.e: mlt, luke ...)\n- Lucene query / DisMax query\n- Grouping / Field Collapsing. (Apache Solr version must be >= 3.3)\n- Convenients methods for querying with Facet, MoreLikeThis\n- HTTP Basic Access Authentication\n- Over HTTPS as well\n- Use json-bigint to handle correctly numbers too large for Javascript Number such as the values of the fields *_l and \\_version\\_. By default json-bigint library is not used because the performance difference compared to the native JSON library is too important with \"large\" chunk of JSON (https://github.com/lbdremy/solr-node-client/issues/114#issuecomment-54165595), but you want to enable it if you use the Optimistic Concurreny feature available in Solr 4.x, along with RealTime Get and Atomic Updates features because they use the \\_version\\_ field. In order to enable it do `var client = solr.createClient({ bigint : true})` or directly on the client instance `client.options.bigint = true`.\n\n## Documentation\n\nSee the website at http://lbdremy.github.com/solr-node-client/.\n\n## Usage\n\n```js\n// Load dependency\nvar solr = require('solr-client');\n\n// Create a client\nvar client = solr.createClient();\n\n// Add a new document\nclient.add({ id : 12, title_t : 'Hello' },function(err,obj){\n   if(err){\n      console.log(err);\n   }else{\n      console.log('Solr response:', obj);\n   }\n});\n```\n\n## Migration between 0.5.x and 0.6.x\n\nNo breaking change has been introduced to this release. However, to take advantage of facet.pivot and facet.pivot.mincount feature,\nyou'll need to pass a solrVersion parameter to the createClient() method. \n\nExample:\n\n```js\n// Will activate features specific to Solr4.0 and above (like facet.pivot and facet.pivot.mincount)\nvar client = solr.createClient({\n solrVersion: '4.0'\n});\n```\n\nA feature allowing to support large queries by switching to POST when the query size reaches the threshold was introduced. To not become\na breaking change, it is by default turned OFF. \n  \nTo activate it, pass the property `get_max_request_entity_size` to the createClient with the threshold in bytes. Minimum is 1.\n \nExample:\n\n```js\n// Will switch to POST as soon as the query size reaches 1000 bytes (limit in servers is usually 2048 or 8192)  \n// You can set it to 1 so every request will always use POST. \nvar client = solr.createClient({\n get_max_request_entity_size: 1000\n});\n```\n\n## Migration between 0.4.x and 0.5.x\n\nThe only breaking change introduced in `0.5.x` is introduced in this commit [3cbc7fc6cf631f019a4626913c0a4b616092133b](https://github.com/lbdremy/solr-node-client/commit/3cbc7fc6cf631f019a4626913c0a4b616092133b) which remove escaping of the Solr special characters in some of the methods of the `Query` class i.e in `Query#rangeFilter`, `Query#matchFilter`, `Query#group`, `Query#facet`, `Query#mlt` if you were relying on this behavior just wrap the arguments you passed to those methods into the [`solr.escapeSpecialChars(arg)`](https://github.com/lbdremy/solr-node-client/blob/master/lib/solr.js#L605) method.\n\nFor example, for some weird reason you wanted to escape the special char `*`, don't ask me ;)\n\n```js\nvar query = client.createQuery();\nquery.q({ '*' : '*' }).rangeFilter({ field : 'id', start : 100, end : '*'})\n```\n\nYou still can:\n\n```js\nvar query = client.createQuery();\nquery.q({ '*' : '*' }).rangeFilter({ field : 'id', start : 100, end : solr.escapeSpecialChars('*')})\n```\n\nPost an issue if you have troubles migrating to v0.5.0.\n\n## Migration between 0.3.x and 0.4.x\n\nThe only breaking change introduced in `0.4.x` is about JSON serialization/deserialization of numbers too large for Javascript Number type. If you were using the Optimistic Concurreny feature available in Solr 4.x, along with RealTime Get and Atomic Updates features which use the \\_version\\_ field or *_l type fields you are affected about this change otherwise you are just fine.\n\nIf you affected in order to fix that just initialize your client with the `bigint` flag set to `true`:\n\n```js\nvar client = solr.createClient({ bigint : true });\n```\n\nor directly on the `Client` instance:\n\n```js\nclient.options.bigint = true;\n```\n\nPost an issue if you have troubles migrating to v0.4.0.\n\n## Migration between 0.2.x and 0.3.x\n\nThe only breaking change introduced in `v0.3.0` is about method chaining of the solr `Client`.\nMethod chaining as simply been removed because we were actually hidding something really interesting and useful\nthe `http.ClientRequest` instance.\n\nSo, before you could have done this:\n\n```js\nvar client = solr.createClient();\n\nclient\n\t.search('q=hello', function(err, obj){\n\t\tconsole.log(err, obj);\n\t})\n\t.search('q=world', function(err, obj){\n\t\tconsole.log(err, obj);\n\t});\n```\n\nNow it won't work, but you have now access to the `http.ClientRequest` instead created by `Client#search`:\n\n```js\nvar client = solr.createClient();\n\nvar request = client.search('q=hello', function(err, obj){\n\tconsole.log(err, obj);\n});\nrequest.setTimeout(200, function(){\n\tconsole.log('search timeout');\n});\n```\n\nPost an issue if you have troubles migrating to v0.3.0.\n\n## Roadmap\n\n### v0.3.x - v0.x.x\n\n- Test suite with mocha and chai instead of vows\n- Implement all features available in Solr 4 (SolrCloud API in particular)\n- Provide all low-level commands\n- Complete documentation\n\n### v1.0.x\n\n- First stable version\n- the API is frozen until v2.0.x, only new features and bug fixes can be introduced\n\n## Test\n\n```\nnpm test\n```\n\nTests are executed against a running SOLR instance, so you might want to:\n- install the schema.xml and solrconfig.xml expected by the tests. You find these in test/materials\n- make sure your solr instance is running\n- specifiy non-default connection params to your server in test/config.json You can inject these also on the command line through:\n\n```\nmocha test/*-test.js --client.core=test-node-client --client.port=8080\n```\n\n## Test coverage\n\nBefore to be able to run the command below, you will need to install jscoverage available here https://github.com/visionmedia/node-jscoverage.\n\n```\nnpm run-script test-cov\n```\n\nThis command will generate a file named `coverage.html`, use your browser to visualize it.\n\n## Static analysis and complexity report\n\n```\nnpm run-script report\n```\n\n## Licence\n\n(The MIT License)\n\nCopyright 2011-2012 HipSnip Limited\n\nCopyright 2013-2014 Rémy Loubradou\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lbdremy/solr-node-client.git"
  },
  "scripts": {
    "report": "rm -rf report && mkdir report && plato -r -d report main.js lib/*",
    "test": "./node_modules/mocha/bin/mocha -R spec test/*-test.js && ./node_modules/mocha/bin/mocha -R spec test/*-test.js --client.bigint=true",
    "test-cov": "jscoverage lib lib-cov && ./node_modules/mocha/bin/mocha -R html-cov test/*-test.js > coverage.html && rm -r lib-cov"
  },
  "version": "0.7.0"
}
